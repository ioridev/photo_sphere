AC_PREREQ(2.59)
AC_INIT(enblend-enfuse,
        [m4_esyscmd([tr -d '\n' < VERSION])],
        [https://bugs.launchpad.net/enblend])
AC_CONFIG_SRCDIR([src/enblend.cc])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_MACRO_DIR(m4)
AM_INIT_AUTOMAKE([-Wall])
AC_CONFIG_HEADER([config.h])

# Checks for programs/compilers.
# avoid default CXXFLAGS, they trigger a compiler error with g++ 4.2
CXXFLAGS_ORIG=$CXXFLAGS
AC_PROG_CXX
CXXFLAGS=$CXXFLAGS_ORIG
AC_PROG_CC
AC_PROG_RANLIB
AC_LANG(C++)

AC_C_BIGENDIAN

# Checks for libraries.
AC_CHECK_LIB([m], [sqrt])
AC_CHECK_LIB([gslcblas], [cblas_dgemm])
AC_CHECK_LIB([gsl], [gsl_blas_dgemm])

AC_CHECK_LIB(z, gzopen,
             [],
             AC_MSG_NOTICE([Compiling without libz.]), [])
AC_CHECK_LIB(jpeg, jpeg_finish_compress,
             [LIBS="-ljpeg ${LIBS}"; AC_DEFINE(HasJPEG, 1, [Define if you have the jpeg library])],
             AC_MSG_NOTICE([Compiling without support for jpeg files.]), [])
AC_CHECK_LIB(png, png_init_io,
             [LIBS="-lpng ${LIBS}"; AC_DEFINE(HasPNG, 1, [Define if you have the png library])],
             AC_MSG_NOTICE([Compiling without support for png files.]), [])
AC_CHECK_LIB(tiff, TIFFOpen,
             [LIBS="-ltiff ${LIBS}"; AC_DEFINE(HasTIFF, 1, [Define if you have the tiff library])],
             AC_MSG_ERROR([libtiff is required to compile Enblend.]), [])
AC_CHECK_LIB(lcms2, cmsCreateTransform,
             [],
             AC_MSG_ERROR([liblcms2 is required to compile Enblend.]), [])

AC_MSG_CHECKING([for Vigra import/export-library])
LIBS="-lvigraimpex $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <vigra/imageinfo.hxx>]],
                                [[vigra::impexListFormats()]])],
               AC_MSG_RESULT(yes),
               [AC_MSG_RESULT(no)
                AC_MSG_ERROR([libvigraimpex is required to compile Enblend.])])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <vigra/imageinfo.hxx>
                                  #include <vigra/impexalpha.hxx>]],
                                [[vigra::BRGBImage image;
                                  vigra::BImage alpha;
                                  vigra::ImageImportInfo info("image.tif");
                                  info.setImageIndex(99);
                                  vigra::importImageAlpha(info, destImage(image), destImage(alpha));]])],
               AC_MSG_RESULT(yes),
               [AC_MSG_RESULT(no)
                AC_MSG_ERROR([Vigra was found, but it was not recent enough.])])

AC_MSG_CHECKING([if OpenEXR is wanted])
AC_ARG_WITH([openexr],
            [AS_HELP_STRING([--with-openexr],
                            [use OpenEXR @<:@default=check@:>@])],
            [],
            [with_openexr=check])
AS_IF([test "$with_openexr" = no],
      [AC_MSG_NOTICE([disabling OpenEXR])
       have_exr=no],
      [if test "$with_openexr" = yes || test "$with_openexr" = check; then
          AC_MSG_RESULT(yes)
          PKG_CHECK_MODULES(OPENEXR, OpenEXR >= 1.0,
                            [AC_DEFINE(HasEXR, 1, [Define if you have EXR library])
                             have_exr=yes],
                            [AC_MSG_WARN("OpenEXR support disabled: " $OPENEXR_PKG_ERRORS)
                             have_exr=no])
          LIBS="${OPENEXR_LIBS} $LIBS"
          CFLAGS="${OPENEXR_CFLAGS} $CFLAGS"
          CXXFLAGS="${OPENEXR_CFLAGS} $CXXFLAGS"
       else
          AC_MSG_RESULT(no)
          have_exr=no
       fi])

AC_ARG_VAR(OPENGL_CFLAGS, [C compiler flags for OpenGL])
AC_ARG_VAR(OPENGL_LIBS, [Linker flags and libraries for OpenGL])
gpu_support_default="yes"
AC_ARG_ENABLE([gpu-support],
              AC_HELP_STRING([--enable-gpu-support],
                             [GPU support for Enblend @<:@default=check@:>@]),
              [gpu_support=$enableval],
              [gpu_support=$gpu_support_default])
AC_ARG_WITH([apple-opengl-framework],
            [AC_HELP_STRING([--with-apple-opengl-framework],
                            [force usage of Apple OpenGL framework (Mac OS X only)])])
can_use_gpu=no
no_gpu_reason=
if test "$gpu_support" = yes; then
    missing_for_gpu=
    if test "$with_apple_opengl_framework" = yes; then
      AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
                [Use the Apple OpenGL framework.])
      GL_LIBS="-framework OpenGL -framework AGL"
      GLUT_CFLAGS="$GLU_CFLAGS"
      GLUT_LIBS="-framework GLUT -lobjc $GL_LIBS"
      AC_SUBST([GL_CFLAGS])
      AC_SUBST([GL_LIBS])
      AC_SUBST([GLU_CFLAGS])
      AC_SUBST([GLU_LIBS])
      AC_SUBST([GLUT_CFLAGS])
      AC_SUBST([GLUT_LIBS])
      no_gl=""
      no_glu=""
      no_glut=""
    else
      AX_CHECK_GL
      AX_CHECK_GLU
      AX_CHECK_GLUT
    fi
    if test "$no_gl" = yes; then
        missing_for_gpu="$missing_for_gpu GL"
        AC_MSG_WARN([[GL not found, disabling GPU mode]])
    elif test "$no_glu" = yes; then
        missing_for_gpu="$missing_for_gpu GLU"
        AC_MSG_WARN([[GLU not found, disabling GPU mode]])
    elif test "$no_glut" = yes; then
        missing_for_gpu="$missing_for_gpu GLUT"
        AC_MSG_WARN([[GLUT not found, disabling GPU mode]])
    else
        # GLUT_LIBS and GLU_LIBS include GL_LIBS implicitly
        OPENGL_LIBS="${GLU_LIBS} ${GLUT_LIBS}"
        OPENGL_CFLAGS="${GL_CFLAGS}"
        AC_CHECK_LIB(GLEW, glewInit,
                     [can_use_gpu=yes
                      OPENGL_LIBS="-lGLEW ${OPENGL_LIBS}"
                      AC_DEFINE(HAVE_LIBGLEW, 1, [Define if you have the GLEW library])],
                     [missing_for_gpu="$missing_for_gpu GLEW"
                      AC_MSG_WARN([[GLEW not found, disabling GPU mode]])],
                     [])
    fi
    if test $can_use_gpu = no; then
        no_gpu_reason=", because of missing$missing_for_gpu"
    fi
else
    no_gpu_reason=", because it was disabled"
fi

# Memory allocation debug support
AC_MSG_CHECKING([if malloc debugging is wanted])
AC_ARG_WITH(dmalloc,
            [  --with-dmalloc          use dmalloc, as in
                          http://www.dmalloc.com/dmalloc.tar.gz],
            [if test "$withval" = yes; then
                AC_MSG_RESULT(yes)
                AC_DEFINE(WITH_DMALLOC, 1,
                    [Define if using the dmalloc debugging malloc package])
                if test $acx_pthread_ok = yes; then
                    LIBS="$LIBS -ldmallocthcxx"
                    enable_dmalloc="yes (thread aware)"
                else
                    LIBS="$LIBS -ldmalloccxx"
                    enable_dmalloc=yes
                fi
                LDFLAGS="$LDFLAGS -g"
                AC_DEFINE(DMALLOC, 1,
                          [Define to enable malloc debugger library])
                AC_DEFINE(DMALLOC_FUNC_CHECK, 1,
                          [Define to enable malloc debugger function checking])
            else
                AC_MSG_RESULT(no)
                enable_dmalloc=no
            fi],
            [AC_MSG_RESULT(no)
             enable_dmalloc=no])

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC

AC_CHECK_HEADERS([fenv.h limits.h stdlib.h string.h unistd.h])

AC_CHECK_HEADER(tiffio.h, [],
                AC_MSG_ERROR([libtiff-devel header files are required to compile Enblend.]))
AC_CHECK_HEADER(jpeglib.h, [],
                AC_MSG_ERROR([libjpeg-devel header files are required to compile Enblend.]))
AC_CHECK_HEADER(png.h, [],
                AC_MSG_ERROR([libpng-devel header files are required to compile Enblend.]))

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADER(vigra/basicimage.hxx, [],
                AC_MSG_ERROR([Vigra "basicimage.hxx" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/algorithm/string/case_conv.hpp, [],
                AC_MSG_ERROR([Boost "case_conv" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/algorithm/string/trim.hpp, [],
                AC_MSG_ERROR([Boost "trim" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/algorithm/string/erase.hpp, [],
                AC_MSG_ERROR([Boost "erase" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/assign/list_inserter.hpp, [],
                AC_MSG_ERROR([Boost "list_inserter" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/assign/list_of.hpp, [],
                AC_MSG_ERROR([Boost "list_of" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/functional/hash.hpp, [],
                AC_MSG_ERROR([Boost "hash" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/lambda/algorithm.hpp, [],
                AC_MSG_ERROR([Boost "algorithm" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/lambda/bind.hpp, [],
                AC_MSG_ERROR([Boost "bind" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/lambda/construct.hpp, [],
                AC_MSG_ERROR([Boost "construct" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/lambda/if.hpp, [],
                AC_MSG_ERROR([Boost "if" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/lambda/lambda.hpp, [],
                AC_MSG_ERROR([Boost "lambda" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/logic/tribool.hpp, [],
                AC_MSG_ERROR([Boost "tribool" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/math/special_functions.hpp, [],
                AC_MSG_ERROR([Boost "special_functions" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/optional.hpp, [],
                AC_MSG_ERROR([Boost "optional" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/pool/pool.hpp, [],
                AC_MSG_ERROR([Boost "pool" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/random/uniform_real.hpp, [],
                AC_MSG_ERROR([Boost "uniform_real" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/random/variate_generator.hpp, [],
                AC_MSG_ERROR([Boost "variate_generator" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/scoped_ptr.hpp, [],
                AC_MSG_ERROR([Boost "scoped_ptr" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/static_assert.hpp, [],
                AC_MSG_ERROR([Boost "static_assert" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/system/error_code.hpp, [],
                AC_MSG_ERROR([Boost "error_code" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/unordered_set.hpp, [],
                AC_MSG_ERROR([Boost "unordered_set" header file is required to compile Enblend.]))
AC_CHECK_HEADER(gsl/gsl_errno.h, [],
                AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_errno" is required to compile Enblend.]))
AC_CHECK_HEADER(gsl/gsl_min.h, [],
                AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_min" is required to compile Enblend.]))
AC_CHECK_HEADER(gsl/gsl_multimin.h, [],
                AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_multimin" is required to compile Enblend.]))
AC_CHECK_HEADER(gsl/gsl_rng.h, [],
                AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_rng" is required to compile Enblend.]))
AC_CHECK_HEADER(gsl/gsl_vector.h, [],
                AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_vector" is required to compile Enblend.]))

LIBS="-lboost_system $LIBS"
AC_MSG_CHECKING([for new Boost system library])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include "boost/system/error_code.hpp"]],
                                [[boost::system::generic_category();
                                  boost::system::system_category()]])],
                                AC_MSG_RESULT(yes),
                                [AC_MSG_RESULT(no)
                                 AC_MSG_ERROR([Boost library "boost_system" is required to compile Enblend.])])

AC_ARG_WITH([boost-filesystem],
            [AS_HELP_STRING([--with-boost-filesystem],
             [use Boost filesystem library @<:@default=check@:>@])],
            [],
            [with_boost_filesystem=check])
AS_IF([test "$with_boost_filesystem" = no],
      [AC_MSG_NOTICE([disabling use of Boost "filesystem" library])],
      [AS_IF([test "$with_boost_filesystem" = yes],
             [AC_MSG_NOTICE([forcing use of Boost "filesystem" library])
              AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
                        [Define if you have boost/filesystem.hpp])
              EXTRA_LIBS="-lboost_filesystem ${EXTRA_LIBS}"],
             [AC_CHECK_HEADER(boost/filesystem.hpp,
                              [],
                              AC_MSG_NOTICE([Boost "filesystem" header is missing.]))
              if test "$ac_cv_header_boost_filesystem_hpp" = yes; then
                  found_boost_filesystem_lib=no
                  candidates="-lboost_filesystem"
                  if test "$acx_pthread_ok" = yes; then
                      candidates="-lboost_filesystem-mt $candidates"
                  fi
                  if test "$with_boost_filesystem" != check; then
                      candidates="$with_boost_filesystem $candidates"
                  fi
                  LIBS_ORIG=$LIBS
                  for x in $candidates; do
                      LIBS="$LIBS_ORIG $x"
                      AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <string>
#include "boost/filesystem.hpp"
]],
[[
typedef boost::filesystem::path basic_path;
basic_path p("foo/bar/baz.oo");
p.parent_path();
p.filename();
basename(p);
extension(p);
]]
)],
                                     [EXTRA_LIBS="$x $y ${EXTRA_LIBS}"
                                      found_boost_filesystem_lib=yes
                                      AC_MSG_NOTICE([compiling with Boost's generic filename parsing support.])
                                      break])
                  done
                  LIBS=$LIBS_ORIG
              fi
              if test "$ac_cv_header_boost_filesystem_hpp" = yes &&
                 test "$found_boost_filesystem_lib" = yes; then
                  AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
                            [Define if you have boost/filesystem.hpp])
              else
                  AC_MSG_NOTICE([Boost "filesystem" header or library not found.  Using built-in support.])
              fi
             ] ) dnl AS_IF($with_boost_filesystem = yes)
      ] ) dnl  AS_IF($with_boost_filesystem = no)

AC_LANG_RESTORE
AC_SUBST(EXTRA_LIBS)

AC_CHECK_HEADER(lcms2.h, [],
                AC_MSG_ERROR([lcms2 header files are required to compile Enblend.]))

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
if test "$ac_cv_c_inline" != no; then
   AC_DEFINE(HAVE_INLINE, 1, [Define if functions can be declared `inline'.])
   AC_SUBST(HAVE_INLINE)
fi

AC_TYPE_OFF_T
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FSEEKO
# AC_FUNC_MALLOC         dnl unused and harmful when cross compiling
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_STRERROR_R
AC_FUNC_STRTOD

AC_CHECK_FUNCS([fesetround floor \
                memset mkstemp \
                pow \
                sqrt strchr strcspn strdup strerror strrchr strtok_r strtol strtoul])

# lrint and lrintf
AC_C99_FUNC_LRINT
AC_C99_FUNC_LRINTF

AX_WITH_PROG(PERL, perl, false, [])
if test "$PERL" = false; then
    AC_MSG_ERROR(cannot find perl)
fi
AX_PROG_PERL_MODULES(Sys::Hostname, [],
                     AC_MSG_ERROR(missing Perl module Sys::Hostname))
AX_PROG_PERL_MODULES(Time::Zone, [],
                     AC_MSG_WARN(missing Perl module Time::Zone))

# Documentation
if test "$cross_compiling" = no; then
    AM_MISSING_PROG(HELP2MAN, help2man)
else
    HELP2MAN=:
fi

can_build_doc=yes
AX_PROG_PERL_MODULES(File::Basename, [],
                     [AC_MSG_WARN(missing Perl module File::Basename)
                      can_build_doc=no
                      missing_for_doc="$missing_for_doc File::Basename"])
AX_PROG_PERL_MODULES(IO::File, [],
                     [AC_MSG_WARN(missing Perl module IO::File)
                      can_build_doc=no
                      missing_for_doc="$missing_for_doc IO::File"])
AX_PROG_PERL_MODULES(IO::Handle, [],
                     [AC_MSG_WARN(missing Perl module IO::Handle)
                      can_build_doc=no
                      missing_for_doc="$missing_for_doc IO::Handle"])

AX_WITH_PROG(GNUPLOT, gnuplot, false, [])
if test "$GNUPLOT" = false; then
    AC_MSG_WARN(cannot find gnuplot; will not be able to build documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc gnuplot"
fi

AC_ARG_WITH([raster-dir],
            AC_HELP_STRING([--with-raster-dir=<DIR>],
                           [set raster image subdirectory @<:@default=raster@:>@]),
            [RASTER_DIR="$withval"],
            [RASTER_DIR=raster])
AC_SUBST(RASTER_DIR)

AC_CHECK_PROG(FIG2DEV,
              fig2dev,
              fig2dev,
              false)
if test "$FIG2DEV" = false; then
    AC_MSG_WARN(cannot find fig2dev; will not be able to build documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc fig2dev"
fi

AC_CHECK_PROG(CONVERT,
              convert,
              convert,
              false)
if test "$CONVERT" = false; then
    AC_MSG_WARN(cannot find convert; will not be able to build documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc convert"
fi

AC_PROG_SED

# These variables are mentioned in the AutoMake documentation as being
# influential to the documentation build process.
AC_CHECK_PROG(MAKEINFO,
              makeinfo,
              makeinfo,
              false)
if test "$MAKEINFO" = false; then
    AC_MSG_WARN(cannot find makeinfo; will not be able to build documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc makeinfo"
fi

AC_CHECK_PROG(TIDY,
              tidy,
              tidy,
              false)
if test "$TIDY" = false; then
    AC_MSG_WARN(cannot find tidy; will not be able to build XHTML documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc tidy"
fi

AC_CHECK_PROG(XMLLINT,
              xmllint,
              xmllint,
              false)
if test "$XMLLINT" = false; then
    AC_MSG_WARN(cannot find xmllint; will not be able to build XHTML documentation)
    can_build_doc=no
    missing_for_doc="$missing_for_doc xmllint"
fi

AM_CONDITIONAL([BUILD_DOC], [test "$can_build_doc" = yes])
if test "$can_build_doc" = no; then
    no_doc_reason=", because of missing$missing_for_doc"
fi

AC_MSG_CHECKING([checking whether split documentation files])
split_doc_default="yes"
AC_ARG_ENABLE([split-doc],
              AC_HELP_STRING([--enable-split-doc],
                             [split documentation @<:@default=yes@:>@]),
              [split_doc=$enableval],
              [split_doc=$split_doc_default])
if test "$split_doc" = yes; then
    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS"
    AM_MAKEINFOHTMLFLAGS="$AM_MAKEINFOHTMLFLAGS"
    AC_MSG_RESULT(yes)
    split_doc=yes
else
    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS --no-split"
    AM_MAKEINFOHTMLFLAGS="$AM_MAKEINFOHTMLFLAGS --no-split --no-headers"
    AC_MSG_RESULT(no)
    split_doc=no
fi
AC_SUBST(AM_MAKEINFOFLAGS)
AC_SUBST(AM_MAKEINFOHTMLFLAGS)

AC_MSG_CHECKING(whether to enable debugging)
debug_default="no"
AC_ARG_ENABLE(debug,
              AC_HELP_STRING([--enable-debug],
                             [turn on debugging @<:@default=no@:>@]),
              [enable_debug=$enableval],
              [enable_debug=$debug_default])
if test "$enable_debug" = yes; then
    CXXFLAGS="$CXXFLAGS -g -DDEBUG -Wall"
    AC_MSG_RESULT(yes)
    enable_debug=yes
else
    CXXFLAGS="$CXXFLAGS -O2 -DNDEBUG -Wall"
    AC_MSG_RESULT(no)
    enable_debug=no
fi

AC_MSG_CHECKING(whether to enable image cache)
image_cache_default="no"
AC_ARG_ENABLE(image_cache,
              AC_HELP_STRING([--enable-image-cache],
                             [allow for processing of large images @<:@default=no@:>@]),
              [enable_image_cache=$enableval],
              [enable_image_cache=$image_cache_default])
if test "$enable_image_cache" = yes; then
    AC_DEFINE(CACHE_IMAGES, 1,
              [Define if you want to compile Enblend and Enfuse with image cache])
    AC_MSG_RESULT(yes)
    enable_image_cache=yes
else
    AC_MSG_RESULT(no)
    enable_image_cache=no
fi

AC_MSG_CHECKING(whether to compile with OpenMP)
openmp_default="no"
AC_ARG_ENABLE(openmp,
              AC_HELP_STRING([--enable-openmp],
                             [compile with OpenMP @<:@default=no@:>@]),
              [enable_openmp=$enableval],
              [enable_openmp=$openmp_default])
if test "$enable_openmp" = yes; then
    AC_MSG_RESULT(yes)
    AX_OPENMP([enable_openmp=yes])
    CFLAGS="$CFLAGS $OPENMP_CFLAGS"
    CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"
fi
if test -z "$OPENMP_CXXFLAGS"; then
    AC_MSG_RESULT(no)
    enable_openmp=no
else
    if test "$enable_image_cache" = yes; then
        AC_MSG_WARN([[image cache and OpenMP support are mutually exclusive]])
        AC_MSG_WARN([[only configure like this if you want to develop a reentrant image cache]])
        warnings=`echo -e "$warnings\n WARNING: Image cache and OpenMP are both enabled!  You are a developer, aren't you?"`
    fi
    enable_openmp=yes
fi

AC_CONFIG_FILES([doc/entropy.gp
                 doc/entropy-cutoff.gp
                 doc/exposure-cutoff.gp
                 doc/gaussian.gp
                 doc/laplacian-of-gaussian.gp
                 doc/sharp-edge.gp
                 doc/smooth-edge.gp])

AC_CONFIG_FILES([Makefile
                 include/Makefile
                 include/vigra_ext/Makefile
                 src/Makefile
                 src/layer_selection/Makefile
                 src/win32helpers/Makefile
                 doc/Makefile])
AC_OUTPUT

# AC_OUTPUT has created "config.h"
AC_MSG_NOTICE([creating config-h.texi])
perl -ne 'if (s/^\s*#define\s+(\S+)\s+"?([^"]*)"?/\@set CFG::$1 $2/) {chomp; print "$_\n"}' \
    < config.h \
    > config-h.texi

AC_MSG_RESULT([
 enblend-enfuse now configured for ${host}
   Source directory:               ${srcdir}
   Installation directory:         ${prefix}
   C++ compiler:                   ${CXX}
   CFLAGS:                         ${CFLAGS:-<none required>}
   OPENGL_CFLAGS:                  ${OPENGL_CFLAGS:-<none required>}
   CXXFLAGS:                       ${CXXFLAGS:-<none required>}
   LDFLAGS:                        ${LDFLAGS:-<none required>}
   LIBS:                           ${LIBS:-<none required>}
   OPENGL_LIBS:                    ${OPENGL_LIBS:-<none required>}
   EXTRA_LIBS (optional):          ${EXTRA_LIBS:-<none selected>}

 raster subdirectory:              ${RASTER_DIR}
 can build all documentation:      ${can_build_doc}${no_doc_reason}

 feature selection:
   split *.info and *.xhtml files: ${split_doc}
   enable debugging support:       ${enable_debug}
   enable malloc debugging:        ${enable_dmalloc}
   OpenEXR image format            ${have_exr}
   use image cache:                ${enable_image_cache}
   build GPU acceleration:         ${can_use_gpu}${no_gpu_reason}
   use OpenMP:                     ${enable_openmp}
${warnings}])
