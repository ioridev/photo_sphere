
////////////////////////////////////////////
// Generated by BRCC v0.1
// BRCC Compiled on: Nov 20 2006 11:39:32
////////////////////////////////////////////

#include <brook/brook.hpp>
static const char *__gpuGDAKernel4_ps20= NULL;
static const char *__gpuGDAKernel4_ps2b= NULL;
static const char *__gpuGDAKernel4_ps2a= NULL;
static const char *__gpuGDAKernel4_ps30= NULL;
static const char *__gpuGDAKernel4_fp30= NULL;
static const char *__gpuGDAKernel4_fp40= NULL;

namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __gpuGDAKernel4_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"# cgc version 1.4.0001, build date Mar  9 2006 20:56:09\n"
				"# command line args: -quiet -DCGC=1 -profile arbfp1 -DUSERECT=1 -profileopts MaxTexIndirections=4,NoDepenentReadLimit=0,NumInstructionSlots=96\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile arbfp1\n"
				"#program main\n"
				"#semantic main._tex_index : TEXUNIT0\n"
				"#semantic main.E : TEXUNIT1\n"
				"#semantic main.__gatherconst_E : C0\n"
				"#semantic main.pi : TEXUNIT2\n"
				"#semantic main.__gatherconst_pi : C1\n"
				"#semantic main.T : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT _tex_index : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var float2 _tex_index_pos : $vin.TEXCOORD0 : TEX0 : 1 : 1\n"
				"#var samplerRECT E[0]TEXUNIT1 : texunit 1 : 2 : 1\n"
				"#var float4 __gatherconst_E : C0 : c[0] : 3 : 1\n"
				"#var samplerRECT pi[0]TEXUNIT2 : texunit 2 : 4 : 1\n"
				"#var float4 __gatherconst_pi : C1 : c[1] : 5 : 1\n"
				"#var float T : C2 : c[2] : 6 : 1\n"
				"#var float4 __output_0 : $vout.COLOR0 : COL : 7 : 1\n"
				"#var float4 __workspace : C3 : c[3] : 8 : 0\n"
				"#const c[4] = 0 31 2.718282 1\n"
				"#const c[5] = 30 29 28 27\n"
				"#const c[6] = 26 25 24 23\n"
				"#const c[7] = 22 21 20 19\n"
				"#const c[8] = 18 17 16 15\n"
				"#const c[9] = 14 13 12 11\n"
				"#const c[10] = 10 9 8 7\n"
				"#const c[11] = 6 5 4 3\n"
				"#const c[12] = 2 0.03125\n"
				"PARAM c[13] = { program.local[0..3],\n"
				"		{ 0, 31, 2.7182817, 1 },\n"
				"		{ 30, 29, 28, 27 },\n"
				"		{ 26, 25, 24, 23 },\n"
				"		{ 22, 21, 20, 19 },\n"
				"		{ 18, 17, 16, 15 },\n"
				"		{ 14, 13, 12, 11 },\n"
				"		{ 10, 9, 8, 7 },\n"
				"		{ 6, 5, 4, 3 },\n"
				"		{ 2, 0.03125 } };\n"
				"TEMP R0;\n"
				"TEMP R1;\n"
				"TEMP R2;\n"
				"TEMP R3;\n"
				"TEMP R4;\n"
				"TEMP R5;\n"
				"TEMP R6;\n"
				"TEMP R7;\n"
				"TEX R5.x, fragment.texcoord[0], texture[0], RECT;\n"
				"RCP R7.z, c[2].x;\n"
				"MOV R7.xy, c[4].ywzw;\n"
				"ADD R1.x, R5, c[0].z;\n"
				"MOV R1.y, c[4].x;\n"
				"TEX R1, R1, texture[1], RECT;\n"
				"MOV R0.y, c[4].x;\n"
				"MOV R0.x, c[0].z;\n"
				"TEX R0, R0, texture[1], RECT;\n"
				"ADD R2, R1, -R0;\n"
				"MUL R2, R2, R7.z;\n"
				"POW R2.x, c[4].z, R2.x;\n"
				"POW R2.y, c[4].z, R2.y;\n"
				"POW R2.w, c[4].z, R2.w;\n"
				"POW R2.z, c[4].z, R2.z;\n"
				"ADD R3, R2, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MOV R0.y, c[4].x;\n"
				"ADD R0.x, c[0].z, R7.y;\n"
				"TEX R0, R0, texture[1], RECT;\n"
				"ADD R0, R1, -R0;\n"
				"MUL R0, R0, R7.z;\n"
				"POW R0.x, c[4].z, R0.x;\n"
				"POW R0.y, c[4].z, R0.y;\n"
				"POW R0.w, c[4].z, R0.w;\n"
				"POW R0.z, c[4].z, R0.z;\n"
				"ADD R0, R0, c[4].w;\n"
				"RCP R2.x, R0.x;\n"
				"RCP R2.y, R0.y;\n"
				"RCP R2.z, R0.z;\n"
				"RCP R2.w, R0.w;\n"
				"MOV R0.y, c[4].x;\n"
				"ADD R0.x, c[1].z, R7.y;\n"
				"TEX R4, R0, texture[2], RECT;\n"
				"ADD R0.x, R5, c[1].z;\n"
				"MOV R0.y, c[4].x;\n"
				"TEX R0, R0, texture[2], RECT;\n"
				"ADD R4, R0, R4;\n"
				"MUL R4, R4, R2;\n"
				"MOV R2.y, c[4].x;\n"
				"MOV R2.x, c[1].z;\n"
				"TEX R2, R2, texture[2], RECT;\n"
				"ADD R2, R0, R2;\n"
				"MAD R6, R2, R3, R4;\n"
				"MOV R2.x, c[12];\n"
				"MOV R2.y, c[4].x;\n"
				"ADD R2.x, c[0].z, R2;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[11];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[12];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[10];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[11];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[9];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[10];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[8];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[9];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[7];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[8];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R4, R2, texture[1], RECT;\n"
				"MOV R2, c[6];\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.w;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R5, R3, c[4].w;\n"
				"MOV R3.x, c[7];\n"
				"ADD R2.x, c[0].z, R2;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R4, R4, c[4].w;\n"
				"RCP R4.x, R4.x;\n"
				"RCP R4.y, R4.y;\n"
				"RCP R4.z, R4.z;\n"
				"RCP R4.w, R4.w;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R3;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MAD R3, R3, R4, R6;\n"
				"RCP R4.x, R5.x;\n"
				"RCP R4.y, R5.y;\n"
				"ADD R5.x, c[1].z, R2.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R4.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R4.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R4, R3;\n"
				"ADD R3.x, c[0].z, R2.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R4, R3, texture[1], RECT;\n"
				"ADD R4, R1, -R4;\n"
				"MUL R4, R4, R7.z;\n"
				"ADD R3.x, c[0].z, R2.y;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"POW R4.x, c[4].z, R4.x;\n"
				"POW R4.y, c[4].z, R4.y;\n"
				"POW R4.w, c[4].z, R4.w;\n"
				"POW R4.z, c[4].z, R4.z;\n"
				"ADD R6, R4, c[4].w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"MOV R2.w, c[4].x;\n"
				"ADD R2.z, c[1], R2;\n"
				"TEX R4, R2.zwzw, texture[2], RECT;\n"
				"ADD R2.z, c[1], R2.y;\n"
				"RCP R6.w, R6.w;\n"
				"ADD R4, R0, R4;\n"
				"MAD R4, R4, R6, R5;\n"
				"MOV R2.w, c[4].x;\n"
				"TEX R5, R2.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MOV R2.y, c[4].x;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MAD R6, R5, R3, R4;\n"
				"TEX R3, R2, texture[1], RECT;\n"
				"MOV R4, c[5];\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"ADD R2.x, c[0].z, R4.w;\n"
				"MOV R2.y, c[4].x;\n"
				"TEX R2, R2, texture[1], RECT;\n"
				"ADD R2, R1, -R2;\n"
				"MUL R2, R2, R7.z;\n"
				"POW R2.x, c[4].z, R2.x;\n"
				"POW R2.y, c[4].z, R2.y;\n"
				"POW R2.w, c[4].z, R2.w;\n"
				"POW R2.z, c[4].z, R2.z;\n"
				"ADD R5, R2, c[4].w;\n"
				"MOV R2.x, c[6];\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R3, R3, c[4].w;\n"
				"RCP R3.x, R3.x;\n"
				"RCP R3.y, R3.y;\n"
				"RCP R3.z, R3.z;\n"
				"RCP R3.w, R3.w;\n"
				"MOV R2.y, c[4].x;\n"
				"ADD R2.x, c[1].z, R2;\n"
				"TEX R2, R2, texture[2], RECT;\n"
				"ADD R2, R0, R2;\n"
				"MAD R2, R2, R3, R6;\n"
				"RCP R3.x, R5.x;\n"
				"RCP R3.y, R5.y;\n"
				"ADD R5.x, c[1].z, R4.w;\n"
				"MOV R5.y, c[4].x;\n"
				"RCP R3.z, R5.z;\n"
				"TEX R6, R5, texture[2], RECT;\n"
				"RCP R3.w, R5.w;\n"
				"ADD R5, R0, R6;\n"
				"MAD R5, R5, R3, R2;\n"
				"ADD R2.x, c[0].z, R4.z;\n"
				"MOV R2.y, c[4].x;\n"
				"TEX R3, R2, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MUL R3, R3, R7.z;\n"
				"ADD R2.x, c[0].z, R4.y;\n"
				"MOV R2.y, c[4].x;\n"
				"TEX R2, R2, texture[1], RECT;\n"
				"ADD R2, R1, -R2;\n"
				"MUL R2, R2, R7.z;\n"
				"POW R3.x, c[4].z, R3.x;\n"
				"POW R3.y, c[4].z, R3.y;\n"
				"POW R3.w, c[4].z, R3.w;\n"
				"POW R3.z, c[4].z, R3.z;\n"
				"ADD R6, R3, c[4].w;\n"
				"ADD R3.x, c[1].z, R4.z;\n"
				"MOV R3.y, c[4].x;\n"
				"TEX R3, R3, texture[2], RECT;\n"
				"ADD R3, R0, R3;\n"
				"MOV R4.w, c[4].x;\n"
				"ADD R4.z, c[1], R4.y;\n"
				"POW R2.x, c[4].z, R2.x;\n"
				"POW R2.y, c[4].z, R2.y;\n"
				"POW R2.w, c[4].z, R2.w;\n"
				"POW R2.z, c[4].z, R2.z;\n"
				"ADD R2, R2, c[4].w;\n"
				"RCP R2.x, R2.x;\n"
				"RCP R2.y, R2.y;\n"
				"RCP R2.z, R2.z;\n"
				"RCP R2.w, R2.w;\n"
				"RCP R6.x, R6.x;\n"
				"RCP R6.y, R6.y;\n"
				"RCP R6.z, R6.z;\n"
				"RCP R6.w, R6.w;\n"
				"MAD R3, R3, R6, R5;\n"
				"TEX R5, R4.zwzw, texture[2], RECT;\n"
				"ADD R5, R0, R5;\n"
				"MAD R5, R5, R2, R3;\n"
				"ADD R2.x, c[0].z, R4;\n"
				"MOV R2.y, c[4].x;\n"
				"TEX R3, R2, texture[1], RECT;\n"
				"ADD R3, R1, -R3;\n"
				"MOV R2.y, c[4].x;\n"
				"ADD R2.x, c[0].z, R7;\n"
				"TEX R2, R2, texture[1], RECT;\n"
				"ADD R1, R1, -R2;\n"
				"MUL R1, R1, R7.z;\n"
				"MUL R2, R3, R7.z;\n"
				"POW R1.x, c[4].z, R1.x;\n"
				"POW R1.y, c[4].z, R1.y;\n"
				"POW R1.w, c[4].z, R1.w;\n"
				"POW R1.z, c[4].z, R1.z;\n"
				"ADD R3, R1, c[4].w;\n"
				"MOV R1.x, c[5];\n"
				"POW R2.x, c[4].z, R2.x;\n"
				"POW R2.y, c[4].z, R2.y;\n"
				"POW R2.w, c[4].z, R2.w;\n"
				"POW R2.z, c[4].z, R2.z;\n"
				"ADD R2, R2, c[4].w;\n"
				"RCP R2.x, R2.x;\n"
				"RCP R2.y, R2.y;\n"
				"RCP R2.z, R2.z;\n"
				"RCP R2.w, R2.w;\n"
				"MOV R1.y, c[4].x;\n"
				"ADD R1.x, c[1].z, R1;\n"
				"TEX R1, R1, texture[2], RECT;\n"
				"ADD R1, R0, R1;\n"
				"MAD R1, R1, R2, R5;\n"
				"RCP R2.x, R3.x;\n"
				"RCP R2.y, R3.y;\n"
				"RCP R2.z, R3.z;\n"
				"MOV R3.y, c[4].x;\n"
				"ADD R3.x, c[1].z, R7;\n"
				"TEX R4, R3, texture[2], RECT;\n"
				"RCP R2.w, R3.w;\n"
				"ADD R0, R0, R4;\n"
				"MAD R0, R0, R2, R1;\n"
				"MUL result.color, R0, c[12].y;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:5\n"
				"##s:1:index\n"
				"##c:4:E\n"
				"##c:4:pi\n"
				"##c:1:T\n"
				"##o:4:output\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(2, kGatherConstant_Shape)
				.constant(3, kGatherConstant_Shape)
				.constant(4, 0)
				.sampler(1, 0)
				.sampler(2, 0)
				.sampler(3, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.output(5, 0)
			)
		);
	static const void* __gpuGDAKernel4_arb = &__gpuGDAKernel4_arb_desc;
}

void  __gpuGDAKernel4_cpu_inner(const __BrtFloat1  &index,
                               const __BrtArray<__BrtFloat4  > &E,
                               const __BrtArray<__BrtFloat4  > &pi,
                               const __BrtFloat1  &T,
                               __BrtFloat4  &output)
{
  __BrtFloat4  ex = E[index];
  __BrtFloat4  pix = pi[index];
  __BrtFloat4  An;
  __BrtFloat4  pi_plus;
  __BrtFloat4  sum = __BrtFloat1(0.000000f);
  __BrtFloat1  i = __BrtFloat1((float)0);

  for (i = __BrtFloat1((float)0); i < __BrtFloat1((float)32); ++i)
  {
    An = __exp_cpu_inner((ex - E[i]) / T) + __BrtFloat1(1.000000f);
    pi_plus = pix + pi[i];
    sum += pi_plus / An;
  }

  output = sum / __BrtFloat1(32.000000f);
}
void  __gpuGDAKernel4_cpu(::brook::Kernel *__k, const std::vector<void *>&args)
{
  ::brook::StreamInterface *arg_index = (::brook::StreamInterface *) args[0];
  __BrtArray<__BrtFloat4  > *arg_E = (__BrtArray<__BrtFloat4  > *) args[1];
  __BrtArray<__BrtFloat4  > *arg_pi = (__BrtArray<__BrtFloat4  > *) args[2];
  __BrtFloat1 *arg_T = (__BrtFloat1 *) args[3];
  ::brook::StreamInterface *arg_output = (::brook::StreamInterface *) args[4];
  
  do {
    Addressable <__BrtFloat4  > __out_arg_output((__BrtFloat4 *) __k->FetchElem(arg_output));
    __gpuGDAKernel4_cpu_inner (Addressable <__BrtFloat1 >((__BrtFloat1 *) __k->FetchElem(arg_index)),
                               *arg_E,
                               *arg_pi,
                               *arg_T,
                               __out_arg_output);
    *reinterpret_cast<__BrtFloat4 *>(__out_arg_output.address) = __out_arg_output.castToArg(*reinterpret_cast<__BrtFloat4 *>(__out_arg_output.address));
  } while (__k->Continue());
}

void  gpuGDAKernel4 (::brook::stream index,
		::brook::stream E,
		::brook::stream pi,
		const float  T,
		::brook::stream output) {
  static const void *__gpuGDAKernel4_fp[] = {
     "fp30", __gpuGDAKernel4_fp30,
     "fp40", __gpuGDAKernel4_fp40,
     "arb", __gpuGDAKernel4_arb,
     "ps20", __gpuGDAKernel4_ps20,
     "ps2b", __gpuGDAKernel4_ps2b,
     "ps2a", __gpuGDAKernel4_ps2a,
     "ps30", __gpuGDAKernel4_ps30,
     "cpu", (void *) __gpuGDAKernel4_cpu,
     NULL, NULL };
  static ::brook::kernel  __k(__gpuGDAKernel4_fp);

  __k->PushStream(index);
  __k->PushGatherStream(E);
  __k->PushGatherStream(pi);
  __k->PushConstant(T);
  __k->PushOutput(output);
  __k->Map();

}


static const char *__gpuBlendKernel_ps20= NULL;
static const char *__gpuBlendKernel_ps2b= NULL;
static const char *__gpuBlendKernel_ps2a= NULL;
static const char *__gpuBlendKernel_ps30= NULL;
static const char *__gpuBlendKernel_fp30= NULL;
static const char *__gpuBlendKernel_fp40= NULL;

namespace {
	using namespace ::brook::desc;
	static const gpu_kernel_desc __gpuBlendKernel_arb_desc = gpu_kernel_desc()
		.technique( gpu_technique_desc()
			.pass( gpu_pass_desc(
				"!!ARBfp1.0\n"
				"# cgc version 1.4.0001, build date Mar  9 2006 20:56:09\n"
				"# command line args: -quiet -DCGC=1 -profile arbfp1 -DUSERECT=1 -profileopts MaxTexIndirections=4,NoDepenentReadLimit=0,NumInstructionSlots=96\n"
				"#vendor NVIDIA Corporation\n"
				"#version 1.0.02\n"
				"#profile arbfp1\n"
				"#program main\n"
				"#semantic main._tex_black : TEXUNIT0\n"
				"#semantic main._tex_white : TEXUNIT1\n"
				"#semantic main._tex_mask : TEXUNIT2\n"
				"#semantic main.scale : C0\n"
				"#semantic main.clamp_min : C1\n"
				"#semantic main.clamp_max : C2\n"
				"#semantic main.__workspace : C3\n"
				"#var samplerRECT _tex_black : TEXUNIT0 : texunit 0 : 0 : 1\n"
				"#var float2 _tex_black_pos : $vin.TEXCOORD0 : TEX0 : 1 : 1\n"
				"#var samplerRECT _tex_white : TEXUNIT1 : texunit 1 : 2 : 1\n"
				"#var float2 _tex_white_pos : $vin.TEXCOORD1 : TEX1 : 3 : 1\n"
				"#var samplerRECT _tex_mask : TEXUNIT2 : texunit 2 : 4 : 1\n"
				"#var float2 _tex_mask_pos : $vin.TEXCOORD2 : TEX2 : 5 : 1\n"
				"#var float scale : C0 : c[0] : 6 : 1\n"
				"#var float clamp_min : C1 : c[1] : 7 : 1\n"
				"#var float clamp_max : C2 : c[2] : 8 : 1\n"
				"#var float3 __output_0 : $vout.COLOR0 : COL : 9 : 1\n"
				"#var float4 __workspace : C3 : c[3] : 10 : 0\n"
				"#const c[4] = 1\n"
				"PARAM c[5] = { program.local[0..3],\n"
				"		{ 1 } };\n"
				"TEMP R0;\n"
				"TEMP R1;\n"
				"RCP R0.y, c[0].x;\n"
				"TEX R0.x, fragment.texcoord[2], texture[2], RECT;\n"
				"MUL R0.w, R0.x, R0.y;\n"
				"TEX R0.xyz, fragment.texcoord[0], texture[0], RECT;\n"
				"ADD R1.x, -R0.w, c[4];\n"
				"MUL R1.xyz, R1.x, R0;\n"
				"TEX R0.xyz, fragment.texcoord[1], texture[1], RECT;\n"
				"MAD R0.xyz, R0.w, R0, R1;\n"
				"MAX R0.xyz, R0, c[1].x;\n"
				"MIN result.color.xyz, R0, c[2].x;\n"
				"END \n"
				"##!!BRCC\n"
				"##narg:7\n"
				"##s:3:black\n"
				"##s:3:white\n"
				"##s:1:mask\n"
				"##c:1:scale\n"
				"##c:1:clamp_min\n"
				"##c:1:clamp_max\n"
				"##o:3:o\n"
				"##workspace:1024\n"
				"##!!multipleOutputInfo:0:1:\n"
				"##!!fullAddressTrans:0:\n"
				"##!!reductionFactor:0:\n"
				"")
				.constant(4, 0)
				.constant(5, 0)
				.constant(6, 0)
				.sampler(1, 0)
				.sampler(2, 0)
				.sampler(3, 0)
				.interpolant(1, kStreamInterpolant_Position)
				.interpolant(2, kStreamInterpolant_Position)
				.interpolant(3, kStreamInterpolant_Position)
				.output(7, 0)
			)
		);
	static const void* __gpuBlendKernel_arb = &__gpuBlendKernel_arb_desc;
}

void  __gpuBlendKernel_cpu_inner(const __BrtFloat3  &black,
                                const __BrtFloat3  &white,
                                const __BrtFloat1  &mask,
                                const __BrtFloat1  &scale,
                                const __BrtFloat1  &clamp_min,
                                const __BrtFloat1  &clamp_max,
                                __BrtFloat3  &o)
{
  __BrtFloat1  whiteCoeff = mask / scale;
  __BrtFloat1  blackCoeff = __BrtFloat1(1.000000f) - whiteCoeff;

  o = __min_cpu_inner(__max_cpu_inner(whiteCoeff * white + blackCoeff * black,clamp_min),clamp_max);
}
void  __gpuBlendKernel_cpu(::brook::Kernel *__k, const std::vector<void *>&args)
{
  ::brook::StreamInterface *arg_black = (::brook::StreamInterface *) args[0];
  ::brook::StreamInterface *arg_white = (::brook::StreamInterface *) args[1];
  ::brook::StreamInterface *arg_mask = (::brook::StreamInterface *) args[2];
  __BrtFloat1 *arg_scale = (__BrtFloat1 *) args[3];
  __BrtFloat1 *arg_clamp_min = (__BrtFloat1 *) args[4];
  __BrtFloat1 *arg_clamp_max = (__BrtFloat1 *) args[5];
  ::brook::StreamInterface *arg_o = (::brook::StreamInterface *) args[6];
  
  do {
    Addressable <__BrtFloat3  > __out_arg_o((__BrtFloat3 *) __k->FetchElem(arg_o));
    __gpuBlendKernel_cpu_inner (Addressable <__BrtFloat3 >((__BrtFloat3 *) __k->FetchElem(arg_black)),
                                Addressable <__BrtFloat3 >((__BrtFloat3 *) __k->FetchElem(arg_white)),
                                Addressable <__BrtFloat1 >((__BrtFloat1 *) __k->FetchElem(arg_mask)),
                                *arg_scale,
                                *arg_clamp_min,
                                *arg_clamp_max,
                                __out_arg_o);
    *reinterpret_cast<__BrtFloat3 *>(__out_arg_o.address) = __out_arg_o.castToArg(*reinterpret_cast<__BrtFloat3 *>(__out_arg_o.address));
  } while (__k->Continue());
}

void  gpuBlendKernel (::brook::stream black,
		::brook::stream white,
		::brook::stream mask,
		const float  scale,
		const float  clamp_min,
		const float  clamp_max,
		::brook::stream o) {
  static const void *__gpuBlendKernel_fp[] = {
     "fp30", __gpuBlendKernel_fp30,
     "fp40", __gpuBlendKernel_fp40,
     "arb", __gpuBlendKernel_arb,
     "ps20", __gpuBlendKernel_ps20,
     "ps2b", __gpuBlendKernel_ps2b,
     "ps2a", __gpuBlendKernel_ps2a,
     "ps30", __gpuBlendKernel_ps30,
     "cpu", (void *) __gpuBlendKernel_cpu,
     NULL, NULL };
  static ::brook::kernel  __k(__gpuBlendKernel_fp);

  __k->PushStream(black);
  __k->PushStream(white);
  __k->PushStream(mask);
  __k->PushConstant(scale);
  __k->PushConstant(clamp_min);
  __k->PushConstant(clamp_max);
  __k->PushOutput(o);
  __k->Map();

}



